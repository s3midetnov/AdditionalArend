\import Algebra.Field
\import Algebra.Field.AlgebraicClosure
\import Algebra.Group
\import Algebra.Group.Representation.GSet
\import Algebra.Group.Sub
\import Algebra.Meta
\import Algebra.Module
\import Algebra.Module.LinearMap
\import Algebra.Module.Sub
\import Algebra.Monoid
\import Algebra.Monoid.Sub
\import Algebra.Pointed
\import Algebra.Ring
\import Arith.Nat
\import Data.List
\import Equiv
\import Function
\import Function.Meta ($)
\import Logic
\import Logic.Meta
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\import Set
\import Algebra.Monoid
\import Set.Category

-- *c_zro-left = zero-mu

\func isZeroMap {R : Ring} {A B : LModule R} (f : LinearMap A B) => \Pi (a : A) -> f a = 0

\func FunctorialPowerLMod{R : Ring} {M : LModule R} {I J : BaseSet} (f : SetHom I J) :
  LinearMap (PowerLModule J M) (PowerLModule I M) \cowith
  | func e => \lam j => e (f j)
  | func-+ => ext (\lam _ => idp)
  | func-*c => ext (\lam _ => idp)

\func OneDimSubmod{R : Ring} {L : LModule R} (v : L) : SubLModule R L \cowith
  | contains u => ∃(r : R)(r *c v = u)
  | contains_zro => inP(0, L.*c_zro-left)
  | contains_+ p q => \case \elim p, \elim q \with {
    | inP r1, inP r2 => inP (r1.1 + r2.1, rewrite (*c-rdistr, r1.2, r2.2) idp)
  }
  | contains_negative p => \case \elim p \with {
    | inP r => inP  (negative r.1, rewrite (L.*c_negative-left, pmap L.negative r.2) idp)
  }
  | contains_*c {a : R} {s : L} p => \case \elim p \with {
    | inP r => inP(a * r.1, rewrite (L.*c-assoc, r.2) idp)
  }

\func isTrivial {R : Ring} {E : LModule R} (S : SubLModule R E) : \Prop
  => (\Pi (v : E) -> S.contains v -> v = 0) ||  (\Pi (v : E) -> S.contains v)

\func OneDimSubmod-isNot-Trivial {R : Ring} {L : LModule R}(v : L)(p : Not (v = 0)) :
  Not (isTrivial (OneDimSubmod v)) => {?}

-- for Schur's Lemma
\func Kernel-SubM {R : Ring} {A B : LModule R}(f : LinearMap A B) : SubLModule R A \cowith
  | contains a => f a = 0
  | contains_*c p => rewrite (f.func-*c, p, B.*c_zro-right) idp
  | contains_zro => f.func-zro
  | contains_+  p p' => rewrite (f.func-+, p, p', B.zro-right) idp
  | contains_negative p => rewrite (f.func-negative, p, B.negative_zro) idp

-- for Schur's Lemma
\func Image-SubM {R : Ring} {A B : LModule R}(f : LinearMap A B) : SubLModule R B \cowith
  | contains b => ∃ (a : A)(f a = b)
  | contains_zro => inP (0, f.func-zro)
  | contains_+ p p' => \case \elim  p,  \elim p' \with {
    | inP p, inP p' => inP (p.1 + p'.1, rewrite (f.func-+, p.2, p'.2) idp)
  }
  | contains_negative p => \case \elim p \with {
    | inP p => inP (negative p.1, rewrite (f.func-negative, p.2) idp)
  }
  | contains_*c {c} p => \case \elim p \with {
    | inP p => inP (c *c p.1, rewrite (f.func-*c, p.2) idp)
  }




\class LinearAlgebraOverAlgebraicallyClosed \noclassifying (k : Ring) (p : IsAlgebraicallyClosed k){

  -- add nontriviality condition
  \func isSubEigenspace {V : LModule k} {M : LinearMap V V} (E : SubLModule k V) (lam : k)
     => \Pi(e : V) -> E.contains e -> M e = lam *c e
}

\func EigenSubSpace (k : Field) (p : IsAlgebraicallyClosed k) (V : LModule k)(f : LinearMap V V) :
  \Sigma (E : SubLModule k V) (Not (isTrivial E)) (∃(lam : k)(\Pi (e : V) -> E.contains e -> f e = lam *c e)) => {?}

