\import Algebra.Group
\import Algebra.Group.Category
\import Algebra.Group.Representation.Category
\import Algebra.Group.Representation.Representation
\import Algebra.Group.Sub
\import Algebra.Meta
\import Algebra.Module
\import Algebra.Module.Category
\import Algebra.Module.LinearMap
\import Algebra.Module.Sub
\import Algebra.Monoid
\import Algebra.Monoid.Sub
\import Algebra.Pointed
\import Algebra.Ring
\import Arith.Nat
\import Data.Bool
\import Equiv
\import Function
\import Function.Meta ($)
\import Logic
\import Logic.Meta
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\import Set
\import Algebra.Monoid
\import Algebra.Group.Representation.LinearAlgFacts
\open Algebra.Group.Representation.Representation

\class SubLinRepres {R : Ring} {G : Group} (E : LinRepres R G) {
  | \classifying S : SubLModule R E -- how to make it classifying/
  | invariance {e : E} {g : G} : S.contains e -> S.contains (g ** e)
}

-- \func check {R : Ring} {G : Group} (E : LinRepres R G) (F : SubRepresentation E) (e : E) : F.S.contains

\func KernelSubRepr {R : Ring} {G : Group} {E E' : LinRepres R G} (f : InterwiningMap E E') : SubLinRepres E \cowith
  | S => Kernel-SubM f
  | invariance {e : E} {g : G} (p : f e = 0) => helper p -- it does not allow me to write body of helper here, strange
  \where
      \func helper {e : E} {g : G} (p : f e = 0) : f (g ** e) = 0 => rewrite (f.func-**, pmap (g **) p, E'.g**-zro) idp

\func ImageSubRepr {R : Ring} {G : Group} {E E' : LinRepres R G} (f : InterwiningMap E E') : SubLinRepres E' \cowith
  | S => Image-SubM f
  | invariance {e' : E'} {g : G} (p : âˆƒ(e : E)(f e = e')) => \case \elim  p \with {
    | inP p => inP (g E.** p.1, rewrite (f.func-**, p.2) idp)
  }

\func isIrreducible {R : Ring}{G : Group} (E : LinRepres R G) :\Prop => \Pi(F : SubLinRepres E) -> isTrivial F.S
\func irrReducible {R : Ring}{G : Group} (E : LinRepres R G) => Equiv {SubLinRepres E} {Bool}

\func one<->two {R : Ring}{G : Group} (E : LinRepres R G) : isIrreducible E -> irrReducible E => {?}


-- auxillary lemma that if f x = x then the subpace of x's is invariant
\func fixed=>invariant {R : Ring} {G : Group} {E : LinRepres R G}
                       (F : SubLModule R E)
                       (p : \Pi (x : E) (g : G) -> F.contains x -> g ** x = x) : SubLinRepres E {| S => F} => {?}
