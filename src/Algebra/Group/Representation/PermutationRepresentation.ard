\import Algebra.Group
\import Algebra.Group.Representation.Category
\import Algebra.Group.GSet.GSet
\import Algebra.Group.GSet.Category
\import Algebra.Group.Representation.Representation
\import Algebra.Group.Representation.LinearAlgFacts
\import Algebra.Group.Representation.Sub
\import Algebra.Group.Sub
\import Algebra.Meta
\import Algebra.Module
\import Algebra.Module.LinearMap
\import Algebra.Module.Sub
\import Algebra.Monoid
\import Algebra.Monoid.Sub
\import Algebra.Pointed
\import Algebra.Ring
\import Arith.Nat
\import Category.Functor
\import Equiv
\import Function
\import Function.Meta ($)
\import Logic
\import Logic.Meta
\import Meta
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\import Set
\import Algebra.Monoid
\import Set.Category


{- | Action given as $$g \cdot \left( \sum \lambda_i x_i \right) := \sum \lambda_{g^{-1}(i)}x_i $$  for a basis of $x_i$'s -} -}
\func PermRepr {R : Ring} {G : Group} (X : GroupAction G) : LinRepres R G \cowith
  | E : LModule => Module
  | ** g f j => f (inverse g X.** j)
  | **-assoc => ext (\lam j => rewrite (X.**-assoc, inverse_prod) idp)
  | id-action => ext (\lam j => rewrite (G.inverse_ide, X.id-action) idp)
  | lin => idp
  | lin-*c => ext (\lam j => idp)
  \where{
    \func inverse_prod {m n : G} : inverse (m * n) = inverse n * inverse m =>
      inv (G.check-for-inv ( rewrite (G.*-assoc, pmap (\lam z => m * z) (inv G.*-assoc) , G.inverse-right, G.ide-left, G.inverse-right) idp))
    \func R_m : LModule R => RingLModule R
    \func Module : LModule R => PowerLModule X R_m -- product module of |X| copies of R
  }

{- |
Here we prove that $span(1, 1, \ldots)$ is an invariant and non-trivial subspace in $\prod_X R$ as an $R$-module.
For this proof to work one needs to know that there are at least two points in $X$.
Also, this does not make much sense over a trivial ring, thus we eliminate this case as well.
 -}
\class PermutationRepresReducible {R : Ring} {G : Group} (X : GroupAction G) {
  | somepoint : X
  | somepoint' : X
  | different-points : somepoint /= somepoint'
  | not-trivial-ring : R.zro /= R.ide
  | decideEq-somepoint (x : X) : Dec (x = somepoint)

  -- basic definitions to work easier
  \func R_m : LModule R => RingLModule R
  \func Module : LModule R => PowerLModule X R_m -- product module of |X| copies of R
  \func Repr : LinRepres R G => PermRepr {R} {G} X
  \func vectorOnes : Module => \lam _ => R.ide

  -- now we present an invariant subspace of permutation representation
  \func Span-submod : SubLModule R Module => OneDimSubmod vectorOnes

  -- it is not used
  \func constCoordinates=>contains (v : Module) : âˆƒ (r : R) (\Pi (j : X) -> v j = r) -> Span-submod.contains v  => \lam z =>  \case \elim z \with {
    | inP a => inP (a.1, ext (\lam j => rewrite (R.ide-right, a.2) idp))
  }

  \func contains=>constCoordinates(x : Module) (p : Span-submod.contains x) (j_1 j_2 : X) : (x j_1) = (x j_2) => \case \elim p \with {
    | inP proof => rewrite (inv proof.2) idp
  }

  \func Span-submod-Is-Fixed :
    \Pi(x : Module)(g : G) -> Span-submod.contains x -> g Repr.** x = x
    => \lam (x : Module) (g : G) (p : Span-submod.contains x) => ext (\lam j => rewrite (aux x p j (inverse g ** j)) idp)
  \where \func aux (x : Module) (p : Span-submod.contains x) (j_1 j_2 : X) : (x j_1) = (x j_2) => \case \elim p \with {
    | inP proof => rewrite (inv proof.2) idp
  }


  \func Span-submod-Is-Invariant : SubLinRepres Repr => fixed=>invariant Span-submod Span-submod-Is-Fixed


  --  (\Pi (v : E) -> S.contains v -> v = 0) ||  (\Pi (v : E) -> S.contains v)
  \func Span-submod-not-trivial : Not (isTrivial Span-submod) => \lam (p : isTrivial Span-submod) => \case p \with {
    | byLeft every-zero => not-trivial-ring (rewrite (pmap (\lam f => f somepoint) (every-zero vectorOnes auxillary), auxillary-2) idp)
    | byRight all-module => auxillary-3.2 (all-module auxillary-3.1)
  }\where{
    \func auxillary : Span-submod.contains vectorOnes => inP (R.ide, Module.ide_*c)
    \func auxillary-2 : Module.zro somepoint = R.zro => idp
    \func build-vector (x : X) : R => \case decideEq-somepoint x \with {
      | yes e => R.ide
      | no n => R.zro
    }
    \func triv-1 : build-vector somepoint = R.ide => {?}
    \func triv-2 : build-vector somepoint' = R.zro => {?} -- rewrite () {?}
    \func auxillary-3 : \Sigma (v : Module)(Not (Span-submod.contains v)) =>
      (build-vector,
       \lam p => not-trivial-ring (rewrite (inv triv-1, inv triv-2) (contains=>constCoordinates build-vector p somepoint' somepoint)) -- (contains=>constCoordinates build-vector p somepoint somepoint')
     )
  }

  {- | $span (1, 1, \ldots)^T$ is an invariant subspace => permutation representation is not irreducible -}
  \func Permutation-Repr-Reducible : Not (isIrreducible Repr) =>
    \lam proof-irred => Span-submod-not-trivial (proof-irred Span-submod-Is-Invariant)  -- Span-submod-not-trivial proof-irred
}