\import Equiv
\import Meta
\import Paths
\import Paths.Meta

\func propTest (x y : Nat) (p q : x = y) : p = q => ext

\func funExtTest {A : \Type} (B : A -> \Type) (f g : \Pi (x : A) -> B x) (h : \Pi (x : A) -> f x = g x) : f = g
  => ext (\lam a => h a)

\func funExtTest2 {A B C : \Type} (f g : A -> B -> C) (h : \Pi (y : B) (x : A) -> f x y = g x y) : f = g
  => ext (\lam x y => h y x)

\func funExtTest3 {A : \Type} (B : A -> \Type) (C : \Pi (x : A) -> B x -> \Type) (f g : \Pi (x : A) (y : B x) -> C x y) (h : \Pi (x : A) (y : B x) -> f x y = g x y) : f = g
  => ext h

\func sigmaExtTest {A B : \Type} (p q : \Sigma A B) (t : p.1 = q.1) (s : p.2 = q.2) : p = q
  => ext (t,s)

\func sigmaExtTest2 {A : \Type} (B : A -> \Type) (p q : \Sigma (x : A) (B x)) (t : p.1 = q.1) (s : transport B t p.2 = q.2) : p = q
  => ext (t,s)

\func sigmaExtTest3 {A : \Type} (B : A -> A -> \Type) (p q : \Sigma (x y : A) (B x y)) (t : p.1 = q.1) (t' : p.2 = q.2) (s : coe (\lam i =>  B (t @ i) (t' @ i)) p.3 right = q.3) : p = q
  => ext (t,t',s)

\func sigmaExtTest4 {A : \Prop} (B : A -> \Type) (p q : \Sigma (x : A) (B x)) (t : p.1 = q.1) (s : transport B t p.2 = q.2)
  => fails {p = q} (ext {?})

\func sigmaExtPropTest {A : \Type} (B : A -> \Prop) (p q : \Sigma (x : A) (B x)) (t : p.1 = q.1) : p = q
  => ext t

\func sigmaExtPropTest2 {A : \Type} (B : A -> \Prop) (C : \Pi (x : A) -> B x -> \Prop) (p q : \Sigma (x : A) (y : B x) (C x y)) (t : p.1 = q.1) : p = q
  => ext t

\func sigmaExtPropTest3 {A : \Type} (B : A -> \Type) (C : \Pi (x : A) -> B x -> \Prop) (p q : \Sigma (x : A) (y : B x) (C x y)) (t : p.1 = q.1) (s : transport B t p.2 = q.2) : p = q
  => ext (t,s)

\func sigmaExtPropTest4 {A : \Type} (B : A -> \Type) (C : \Pi (x : A) -> B x -> \Prop) (p q : \Sigma (x : A) (y : B x) (C x y)) (t : Nat -> p.1 = q.1) (s : transport B (t 0) p.2 = q.2) : p = q
  => ext (t 0, s)

\lemma propUniverseTest (P Q : \Prop) (f : P -> Q) (g : Q -> P) : P = Q
  => ext (f,g)

\lemma propUniverseTest2 (P Q : \Prop) (t : \Sigma (P -> Q) (Q -> P)) : P = Q
  => ext t

\func propUniverseTest3 (P Q : \Prop) (t : Nat -> \Sigma (P -> Q) (Q -> P)) : P = Q
  => ext (t 0)

\func univalenceTest (P Q : \Set) (e : Equiv {P} {Q}) : P = Q
  => ext e

\func univalenceTest2 (P Q : \Type) (e : QEquiv {P} {Q}) : P = Q
  => ext e

\func sigmaPiExtTest {A : \Type} (B : A -> \Type) (p q : \Sigma (x : A) (A -> B x)) (t : p.1 = q.1) (s : transport (\lam x => A -> B x) t p.2 = q.2) : p = q
  => ext (t,s)

\func recordExtTest {A B : \Type} (p q : R A B) (t : p.a = q.a) (s : p.b = q.b) : p = q
  => ext (t,s)
  \where {
    \record R (A B : \Type) (a : A) (b : B)
  }

\func recordExtTest2 {A : \Type} (B : A -> \Type) (p q : R A B) (t : p.a = q.a) (s : transport B t p.b = q.b) : p = q
  => ext (t,s)
  \where {
    \record R (A : \Type) (B : A -> \Type) (a : A) (b : B a)
  }

\func recordExtPropTest {A : \Type} (B : A -> \Prop) (p q : R A B) (t : p.a = q.a) : p = q
  => ext t
  \where {
    \record R (A : \Type) (B : A -> \Type) (a : A) (b : B a)
  }

\func recordPiExtTest2 {A : \Type} (B1 B2 : A -> \Type) (p q : R A B1 B2) (t : p.a = q.a) (s : transport (\lam x => B1 x -> B2 x) t p.f = q.f) : p = q
  => ext (t,s)
  \where {
    \record R (A : \Type) (B1 B2 : A -> \Type) (a : A) (f : B1 a -> B2 a)
  }

\func recordNamedExtTest {A B : \Type} (p q : R A B) (t : p.a = q.a) (s : p.b = q.b) : p = q
  => ext R { | b => s | a => t }
  \where \open recordExtTest

\func recordNamedExtPropTest {A : \Type} (B : A -> \Prop) (p q : R A B) (t : p.a = q.a) : p = q
  => ext R { | a => t }
  \where \open recordExtPropTest

\func recordSuperExtTest {A B : \Type} (p q : S A B) (t : p = {R A B} q) (s : p.a' = q.a') : p = q
  => ext S {
    | R => t
    | a' => s
  }
  \where {
    \open recordExtTest
    \record S \extends R
      | a' : A
  }

\func recordSuperDepExtTest (A : \Type) (a0 : A) (s1 s2 : S A a0) (t : s1 = {R A a0} s2) (r : s1.m = s2.m) (d : coe (\lam i => R.n {t @ i} = r @ i) s1.q right = s2.q) : s1 = s2
  => ext S {
    | R => t
    | m => r
    | q => d
  }
  \where {
    \record R (A : \Type) (a0 : A) (n : A) (p : n = a0)
    \record S \extends R
      | m : A
      | q : n = m
  }

\func recordSuperPropExtTest (s1 s2 : S) (t : s1 = {R} s2) (r : s1.m = s2.m) : s1 = s2
  => ext S {
    | R => t
    | m => r
  }
  \where {
    \record R (n : Nat) (p : n = 0)
    \record S \extends R
      | m : Nat
      | q : n = m
  }

\func recordAllSuperExtTest {A B : \Type} (p q : S A B) (t : p = {R A B} q) : p = q
  => ext S {
    | R => t
  }
  \where {
    \open recordExtTest
    \record S \extends R
  }

\func typeTest (p q : Pair) (t1 : p.1 = q.1) (t2 : p.2 = q.2) : p = q
  => ext (t1,t2)
  \where
    \type Pair => \Sigma Nat Nat

\func arrayTest {A : \Type} (l l' : Array A) (p : l.len = l'.len) (q : transport (Fin __ -> A) p l = l') : l = l'
  => ext (p,q)

\func arrayTest2 {A : \Type} {n m : Nat} (l : Array A n) (l' : Array A m) (p : n = m) (q : transport (Fin __ -> A) p l = l') : l = l'
  => ext (p,q)

\func arrayTest3 {A : \Type} {n : Nat} (l l' : Array A n) (q : l = {Fin n -> A} l') : l = {Array A n} l'
  => ext q

\func arrayTest4 {A : \Type} {n : Nat} (l l' : Array A n) (q : l = {Fin n -> A} l') : l = {Array A} l'
  => ext q
