\import Arith.Nat
\import Logic
\import Meta
\import Order.PartialOrder

\func caseTest1 (n : Nat) (f : 0 = n -> Nat) : Nat => cases (n arg (name = x), idp : x = n) \with {
  | 0, p => f p
  | suc n1, _ => n1
}

\func caseTest2 (n : Nat) (f : n = 0 -> Nat) : Nat => cases (n arg (name = x), idp arg (name = y) : n = x) \with {
  | 0, p => f p
  | suc n1, _ => n1
}

\func caseTestPath (n : Nat) (f : n = 0 -> Nat) : Nat => cases (n arg addPath) \with {
  | 0, p => f p
  | suc n1, _ => n1
}

\func caseTestPath2 (n m : Nat) (f : n = 0 -> Nat) : Nat => cases (n arg addPath, m) \with {
  | 0, p, 0 => f p
  | 0, p, suc m => f p
  | suc n, p, 0 => n
  | suc n, p, suc m => m
}

\func caseTestPath3 (n m : Nat) (f : m = 0 -> Nat) : Nat => cases (n, m arg addPath) \with {
  | 0, 0, q => f q
  | 0, suc m, q => m
  | suc n, 0, q => f q
  | suc n, suc m, q => n
}

\func caseTestPath4 (n m : Nat) (f : n = 0 -> Nat) (g : m = 0 -> Nat) : Nat => cases (n arg addPath, m arg addPath) \with {
  | 0, p, 0, q => g q
  | 0, p, suc m, q => f p
  | suc n, p, 0, q => g q
  | suc n, p, suc m, q => n
}

\lemma caseVarSearch (n : Nat) : (n = 0) || (\Sigma) => cases n \with {
  | 0 => byLeft idp
  | suc _ => byRight ()
}

\lemma caseSearch (f : Nat -> Nat) : (f 0 = 0) || (\Sigma) => cases (f 0) \with {
  | 0 => byLeft idp
  | suc _ => byRight ()
}

\lemma caseSearchArg (f : Nat -> Nat) (p : f 0 = 0) : f 0 = 0 => cases (f 0, p) \with {
  | _, p => p
}

\func caseDefault (n : Nat) : Nat => cases n 0

\func caseDefault2 (n m : Nat) : f n Nat.+ f m = 0 => cases (n,m) idp \with {
  | 0, suc m => idp
} \where
    \func f (n : Nat) : Nat
      | 0 => 0
      | suc n => 0

\lemma dependentTest (n : Nat) (p : n <= 0) : n = 0 => cases (n,p) \with {
  | 0, _ => idp
  | suc n1, p => \case p NatSemiring.zero<suc
}

\func arrayTest (a : Array Nat) : Nat => cases a \with {
  | nil => 0
  | :: n _ => n
}

\func addPathDefault (n : Nat) (f : n = 0 -> Nat) : Nat => cases (n arg addPath) 0

\lemma asTest (n : Nat) : cases (n arg (as = x)) x = (\case n \with { | 0 => 0 | suc n' => suc n' })
  => idp