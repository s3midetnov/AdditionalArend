\import Data.Bool
\import Logic
\import Logic.Meta

\lemma test1 : ∃ = (\Sigma) => idp

\lemma test2 : ∃ Nat = TruncP Nat => idp

\lemma test3 : ∃ (x : Nat) (x = 0) = TruncP (\Sigma (x : Nat) (x = 0)) => idp

\lemma test4 : ∃ {x} (x = 0) = TruncP (\Sigma (x : Nat) (x = 0)) => idp

\lemma test5 : ∃ {x y} (x = 0) = TruncP (\Sigma (x y : Nat) (x = 0)) => idp

\lemma test6 : ∃ (x y : Nat) (x = 0) (y = 0) = TruncP (\Sigma (x y : Nat) (x = 0) (y = 0)) => idp

\lemma test7 (P : Nat -> \Type) : ∃ P = TruncP (\Sigma (x : Nat) (P x)) => idp

\lemma test8 (P : Nat -> Nat -> \Type) : ∃ P = TruncP (\Sigma (x y : Nat) (P x y)) => idp

\lemma test9 (P : Nat -> \Type) : ∃ (x : P) (x = x) = TruncP (\Sigma (x : Nat) (P x) (x = x)) => idp

\lemma test10 (P : Nat -> \Type) : ∃ (x y : P) (x = y) (y = x) = TruncP (\Sigma (x y : Nat) (P x) (P y) (x = y) (y = x)) => idp

\lemma test11 (P : Nat -> Bool -> Array Nat -> \Type) : ∃ ((x,y,z) (a,b,c) : P) (x = a) (y = b) (z = c) = TruncP (\Sigma (x a : Nat) (y b : Bool) (z c : Array Nat) (P x y z) (P a b c) (x = a) (y = b) (z = c)) => idp

\lemma test12 (l : Array Nat) : ∃ l = TruncP (Fin l.len) => idp

\lemma test13 {A : \Type} (y : A) (l : Array A) : ∃ (x : l) (x = y) = TruncP (\Sigma (j : Fin l.len) (l j = y)) => idp

\lemma test14 {A : \Type} (l : Array A) : ∃ (x y : l) (x = y) = TruncP (\Sigma (j j' : Fin l.len) (l j = l j')) => idp

-- \lemma test15 {A : \Type} (l : Array A) : ∃ ((j,x) : withIndex l) (x = l j) = TruncP (\Sigma (j : Fin l.len) (l j = l j)) => idp

\func sigmaTest : Given (x : Nat) (x = 0) = (\Sigma (x : Nat) (x = 0)) => idp

\lemma piTest1 : ∀ (x y : Nat) (x = y) = (\Pi (x y : Nat) -> x = y) => idp

\lemma piTest2 : ∀ {x y : Nat} (x = y) = (\Pi {x y : Nat} -> x = y) => idp

\lemma piTest3 : ∀ x y (pos x = y) = (\Pi (x : Nat) (y : Int) -> pos x = y) => idp

\lemma piTest4 : ∀ {x y} {z} (pos x = z) = (\Pi {x y : Nat} {z : Int} -> pos x = z) => idp

\lemma piTest5 (P : Nat -> \Type) : ∀ (x y : P) (x = y) (y = x) = (\Pi (x y : Nat) (P x) (P y) -> x = y -> y = x) => idp

\lemma piTest6 (P : Nat -> \Type) : ∀ {x y : P} (x = y) (y = x) = (\Pi {x y : Nat} (P x) (P y) -> x = y -> y = x) => idp

\lemma piTest7 {A : \Set} (l : Array A) : ∀ (x y : l) (x = y) (y = x) = (\Pi (j j' : Fin l.len) -> l j = l j' -> l j' = l j) => idp

\lemma piTest8 (P : Nat -> Bool -> Array Nat -> \Type) : ∀ ((x,y,z) (a,b,c) : P) (x = a) (y = b) (z = c) = (\Pi (x a : Nat) (y b : Bool) (z c : Array Nat) -> P x y z -> P a b c -> x = a -> y = b -> z = c) => idp

\lemma depTest1 (P : (Nat -> \Type) -> \Type) : ∃ (Q : P) (q : Q) (q = 0) = TruncP (\Sigma (Q : Nat -> \Type) (P Q) (q : Nat) (Q q) (q = 0)) => idp

\lemma depTest2 (ll : Array (Array Nat)) : ∃ (l : ll) (x : l) (x = 0) = TruncP (\Sigma (j : Fin ll.len) (j' : Fin (DArray.len {ll j})) (ll j j' = 0)) => idp

\lemma iterTest : ∀ (n : Nat) ∃ (m : Nat) (n = m)
  => \lam n => inP (n, idp)

\lemma iterTest2 : ∀ (n : Nat) ∃ (m : Nat) ∀ (k : Nat) Given (k = k) (n = m)
  => \lam n => inP (n, \lam k => (idp, idp))