\import Logic.Meta
\import Meta

\func tuple1 : \Sigma Nat Nat => constructor 0 1

\func tuple2 : \Sigma (x : Nat) (p : x = 0) => constructor 0 idp

\func data1 => fails {B} constructor
  \where
    \data B | con1 | con2

\func data2 : D => constructor 0 1 2
  \where
    \data D | con {x : Nat} (y z : Nat)

\func data3 : D 0 => constructor 1 2 3
  \where
    \data D (t : Nat) | con {x : Nat} (y z : Nat)

\module Common \where {
  \record R (x : Nat) (y : Nat) (z : Nat)
}

\open Common

\func class1 : R => constructor 1 2 3

\func class2 : R 1 => constructor 2 3

\func class3 => fails {R 1} constructor 2

\func class4 => fails {R 1} constructor 2 3 4

\func array1 : Array Nat => constructor 0 (\case __)

\func array2 : DArray { | len => 0 } => constructor (\lam _ => Nat)

\func array3 : Array Nat 0 => constructor

\func array4 (n : Nat) (x : Array Nat n) : Array Nat (suc n) => constructor 17 x
