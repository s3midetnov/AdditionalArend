\import Algebra.Algebra
\import Algebra.Field
\import Algebra.Group
\import Algebra.Meta
\import Algebra.Monoid
\import Algebra.Ordered
\import Arith.Nat
\import Arith.Int
\import Arith.Rat
\import Arith.Real
\import Logic
\import Meta
\import Order.Lattice
\import Order.PartialOrder
\import Order.StrictOrder
\import Arith.Real.Field

\lemma contrTest0 {R : LinearlyOrderedSemiring} {a : R} (p : a < a) : Empty
  => linarith

\lemma contrTest1 {R : LinearlyOrderedSemiring} {a b : R} (p : a < b) (q : b <= a) : Empty
  => linarith

\lemma contrTest2 {R : LinearlyOrderedSemiring} {a b c : R} (p : a < b) (q : b = c) (s : c < a) : Empty
  => linarith

\lemma contrTest3 {R : LinearlyOrderedSemiring} {a b : R} (p : a + b < b) (q : a + b <= a) (s : 0 <= a + b) : Empty
  => linarith

\lemma contrTest4 {a b : Nat} (p : a + b < b) (q : a + b <= a) (s : 0 <= a + b) : Empty
  => linarith

\lemma contrTest5 {R : LinearlyOrderedSemiring} {a b c d : R} (p : 3 * a + 2 * b <= 4 * c) (q : 3 * c + 2 * d < 4 * a) (s : 0 <= a + c) (t : a + c <= b + d) : Empty
  => linarith

\lemma contrTest6 {R : OrderedRing} {a b c : R} (p : a - b <= c) (q : b + c <= a - c) (s : b < a) : Empty
  => linarith

\lemma contrTest7 {R : OrderedRing} {a : R} (p : 0 <= a) (q : 0 < negative a) : Empty
  => linarith

\lemma lessEqTest1 {R : LinearlyOrderedSemiring} {a b c : R} (p : a <= b) (q : b + c <= a) : c <= 0
  => linarith

\lemma lessEqTest2 {R : LinearlyOrderedSemiring} {a b c d : R} (p : a <= b + c) (q : b + 2 * c <= d) : 2 * a <= b + d
  => linarith

\lemma lessEqTest3 {a b c d : Int} (p : a <= b - c) (q : b + c <= d + -1 * a) (r : b <= a + c) : 2 * b <= d
  => linarith

\lemma lessTest1 {R : LinearlyOrderedSemiring} {a b c : R} (p : a < b) (q : b + c <= a + a) : c < a
  => linarith

\lemma lessTest2 {R : LinearlyOrderedSemiring} {a b c d : R} (p : a < b + c) (q : b <= 2 * a) (r : d <= 0) : 3 * d < a + c
  => linarith

\lemma lessTest3 {R : LinearlyOrderedSemiring} {a : R} (p : 0 < a) : a < 7 * a
  => linarith

\lemma lessTest4 {R : LinearlyOrderedSemiring} : 3 < {R} 7
  => linarith

\lemma lessTest5 {R : LinearlyOrderedSemiring} {a b c : R} (p : a < b + 1) (q : 2 * b <= a + c) : a < c + 2
  => linarith

\lemma eqTest1 {R : LinearlyOrderedSemiring} {a b : R} (p : a <= 2 * b) (q : b <= 2 * a) (r : a <= 0) : a = 0
  => linarith

\lemma eqTest2 {R : LinearlyOrderedSemiring} {a b c : R} (p : a <= 2 * b + c) (q : b <= 2 * a + c) (r : 5 * (a + c) <= 0) : a + c = 0
  => linarith

\lemma ratTest0 {a b : Rat} (p : a < b) : a * 2 < a + b
  => linarith

\lemma ratTest1 {a b : Rat} (p : a < b) : a < (a + b) * finv 2
  => linarith

\lemma ratTest2 {a b : Rat} (p : a < b * finv 2) : (negative a + b * -1) * ratio -2 3 < b
  => linarith

\lemma ratTest3 {a b c : Rat} (p : 2 * a < b) (q : a <= 0) : ratio 3 4 * (a - b) * finv (ratio 3 2) < negative a
  => linarith

\lemma sucTest {a : Nat} : suc a < suc (suc a)
  => linarith

\lemma zeroTest {a : Nat} : 0 <= a
  => linarith

\lemma zeroTest2 {a : Nat} : 0 < suc a
  => linarith

\lemma zeroTest3 {a b : Nat} : 0 <= a + b
  => linarith

\lemma sucIntTest {a : Nat} : pos (suc a) < pos (suc (suc a))
  => linarith

\lemma sucIntTest2 {a : Nat} : neg (suc (suc a)) < neg (suc a)
  => linarith

\lemma sucIntTest3 {a b : Nat} (p : a <= b) : pos a < pos (suc b)
  => linarith

\lemma sucIntTest4 {a b : Nat} (p : a <= b) (q : pos (suc b) <= pos a) : Empty
  => linarith

\lemma sucIntTest5 {a b : Nat} (p : a < b) (q : pos (suc b) < pos a) : Empty
  => linarith

\lemma sucIntTest6 {a b : Nat} (p : a = b) (q : pos (suc b) = pos a) : Empty
  => linarith

\lemma sucIntTest7 {a b : Nat} (p : a = b) : pos b = pos a
  => linarith

\lemma addIntTest3 {a b : Nat} : pos a <= pos (a + b)
  => linarith

\lemma zeroIntTest {a : Nat} : 0 < pos (suc a)
  => linarith

\lemma zeroIntTest2 {a : Nat} : neg (suc a) < 0
  => linarith

\lemma zeroIntTest3 {a b : Nat} : 0 < pos (suc a) + pos b
  => linarith

\lemma minusIntTest {a b : Nat} (p : a < b) : a Nat.- b < 0
  => linarith

\lemma sucRatTest {a : Nat} : Rat.fromInt (pos (suc a)) < pos (suc (suc a))
  => linarith

\lemma sucRatTest2 {a : Nat} : Rat.fromInt (neg (suc (suc a))) < neg (suc a)
  => linarith

\lemma zeroRatTest {a : Nat} : Rat.fromInt 0 < pos (suc a)
  => linarith

\lemma zeroRatTest2 {a : Nat} : Rat.fromInt (neg (suc a)) < 0
  => linarith

\lemma zeroRatTest3 {a b : Nat} : Rat.fromInt (neg (suc a)) - Rat.fromInt (pos b) < 0
  => linarith

\lemma fromIntTest {a b : Int} (p : a < b) : Rat.fromInt a < Rat.fromInt b
  => linarith

\lemma fromIntTest2 {a b : Int} (p : a <= b) : Rat.fromInt a <= Rat.fromInt b
  => linarith

\lemma fromIntTest3 {a b : Int} (p : a = b) : Rat.fromInt a = Rat.fromInt b
  => linarith

\lemma fromNatTest {a b : Nat} (p : a < b) : Rat.fromInt a < Rat.fromInt b
  => linarith

\lemma fromNatTest2 {a b : Nat} (p : a <= b) : Rat.fromInt a <= Rat.fromInt b
  => linarith

\lemma fromNatTest3 {a b : Nat} (p : a = b) : Rat.fromInt a = Rat.fromInt b
  => linarith

\lemma denomRatTest {a : Nat} : Rat.fromInt a * ratio 2 3 <= Rat.fromInt a
  => linarith

\lemma implicitArgsTest {R : LinearlyOrderedSemiring.Dec} {a b c : R} (p : a < b âˆ§ c) : a < b
  => linarith (using R.meet-left)

\lemma unusedHypothesis {R : LinearlyOrderedSemiring} {a b c : R} (p : Nat -> a < b) (q : b < c) : b < c
  => linarith

\lemma unusedHypothesis2 {R : LinearlyOrderedSemiring} {a b c : R} (p : Nat -> a < b) (q : b < c) (s : c <= b) : Empty
  => linarith

\lemma unusedHypothesis3 {R : LinearlyOrderedSemiring} {a b c : R} (p : Nat -> a < b) (q : b <= c) (s : c <= b) : b = c
  => linarith

\lemma unusedVariables {R A : LinearlyOrderedSemiring} {a b c : R} {x y : A} (q : x < y) (p : a < b) : a <= b
  => linarith

\lemma realTest {x : Real} (p : 0 < x) : 0 < x * ratio 1 2
  => linarith

\lemma realTest2 {x : Real} : x = x * ratio 1 2 + x * ratio 1 2
  => linarith

\lemma realTest3 {x : Real} (p : 0 < x) : 0 RealAbGroup.< x * ratio 1 2
  => linarith

\lemma ratAlgebraTest {A : OrderedAAlgebra RatField} {x : A} (p : 0 < x) : 0 < x * coefMap (ratio 1 3)
  => linarith

\lemma ratAlgebraTest2 {A : OrderedAAlgebra RatField} {x : A} : x = x * coefMap (ratio 1 2) + coefMap (ratio 1 2) * x
  => linarith