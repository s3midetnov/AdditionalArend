\import Algebra.Meta
\import Algebra.Monoid
\import Algebra.Pointed
\import Meta

\lemma test1 {M : Monoid} (x y : M) (p : Nat -> x * y = ide)
  : (x * x) * (y * y) = ide
  => using (p 0) equation

\lemma test2 {M : Monoid} (x y : M) (p : x * y = ide)
  => fails {(x * x) * (y * y) = ide} hiding p equation

\lemma test3 {M : Monoid} (x y z : M) (p : x * y = ide) (q : y * z = ide) : x = z
  => equation {hiding p} (x * y * z)

\lemma test3a {M : Monoid} (x y z : M) (p : x * y = ide) (q : y * z = ide) : x = z
  => equation {usingOnly q} (x * y * z)

\lemma test4 {M : Monoid} (x y z : M) (p : x * z = x) (q : z * z = y) (s : x * y = y) : x = y
  => equation (x * z * z) {hiding p}

\lemma test4a {M : Monoid} (x y z : M) (p : x * z = x) (q : z * z = y) (s : x * y = y) : x = y
  => equation (x * z * z) {usingOnly (q,s)}

\lemma test5 {M : Monoid} (x y : M) (p : Nat -> x * y = ide)
  : (x * x) * (y * y) = ide
  => equation {using (p 0)}

\lemma test5a {M : Monoid} (x y : M) (p : Nat -> x * y = ide)
  : (x * x) * (y * y) = ide
  => equation {usingOnly (p 0)}

\func test6 (x y : Nat)
  => fails usingOnly x y

\func test6a (x y : Nat)
  => fails usingOnly (suc x) y
