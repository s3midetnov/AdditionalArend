\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Pointed
\import Algebra.Ring
\import Algebra.Semiring
\import Arith.Int
\import Meta
\import Paths.Meta
\import Arith.Nat(NatSemiring)

\func test1 {M : Monoid} (x : M) : x = x * ide
  => simplify

\func test2 {M : Monoid} (x : M) : x * x = (x * (ide * x)) * ide
  => simplify

\func test3 {M : Monoid} (x : M) : ide * x * x * ide = x * ide * x * ide * ide
  => simplify

\func test4 {M : AddMonoid} (x : M) : x + x = x + x + zro
  => simplify

\func test5 {R : Semiring} (x : R) : zro = x * zro
  => simplify

\func test6 {R : Ring} (x : R) : negative (x * x) = x * negative x
  => simplify

\func test6' {R : Ring} (x y : R) : x * negative y = negative (x * y)
  => simplify

\func test7 {R : AddGroup} (x : R) : negative (negative x) = x
  => simplify

\func test7' {R : Group} (x : R) : inverse (inverse x) = x
  => simplify

\func test8 {R : Ring} (x : R) : x * negative ide = negative x
  => simplify

\func test10 {M : Monoid} (x y : M) (p : x * x = y) : x * (1 * x) = y * 1
  => simplify p

\func test11 {G : CGroup} (x : G) : x * inverse x = ide
   => simplify

\func test12 {G : CGroup} (x y : G) : x * y * inverse x = y
  => simplify

\func test13 {G : AbGroup} (x y : G) : x + y + negative x = y
  => simplify

\func test14 {G : Ring} (x y z : G) : x + negative z + z = x
  => simplify

\func test15 (x : Int) : x + 0 = x
  => simplify

\func test16 {R : Ring} (x y z : R) (p : x + y = z) : (0 + x) + (0 + y) = z
  => simplify p

\func test17 {R : Ring} (pow : R -> Nat -> R) (b : R) (n : Nat) : pow b n = R.ide R.* pow b n R.+ R.zro
  => simplify

\func test18 {G : Group} (x y : G) : x * inverse x = ide
  => simplify

\func test19 {G : Group} (x y : G) : x * (inverse x * y) * ide = y * ide
  => simplify

\func test20 {G : Group} (x y : G) : inverse (x * y) = inverse y * inverse x
  => simplify

\func test21 {G : Group} (x y : G) : inverse (x * (inverse x * y) * ide) = inverse y
  => simplify

\func test22 {R : Ring} (x : R) : x = x - 0
  => simplify

\func test23 (b : NatSemiring) : pos 0 * pos 1 = pos 0 * pos b
  => simplify

\func test24 {G : Group} (x : G) (t : x * inverse x = ide) : ide = ide
  => simplify in t

\func test25 {G : Group} (x y : G) (t : inverse (x * (inverse x * y) * ide) * y = ide) : ide = ide
  => simplify in t

\func testNothing
  => fails {0 = 0} simplify
